openapi: '3.0.2'
info:
  title: Specification open api 
  version: '1.0'
servers:
  - url: https://api.server.test/v1
tags:
  - Books
  - Author
paths:
  /book:
    get:
      tags:
        - Books  
      summary: get all books
      operationId: getBooks
      parameters:
      - in: query
        name: bookname
        description: filter a bookName order by realise date 
        schema:
          type: array
        required: false
      - in: query
        name: releaseDateMin
        description: |
            If  `releaseDateMax` is not provided, `releaseDateMin` is ignored.
            `releaseDateMin` can not be after `releaseDateMax`.
        schema:
          type: string
          format: date
        required: false  
      - in: query
        name: releaseDateMax
        description: |
            If  `releaseDateMin` is not provided, `releaseDateMax` is ignored.
            `releaseDateMax` can not be after `releaseDateMin`.
        schema:
          type: string
          format: date
        required: false 
      - $ref: '#/components/parameters/QueryPagination'
      - $ref: '#/components/parameters/PageSize'       
      responses:
       200:
        $ref: "#/components/responses/Response200"
        description: the list of bookname order by release date given 
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
    put:
      tags:
        - Books
      summary: Create or update a books 
      operationId: crupdateBook
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: the list of created or updated books 
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /books/{bookId}/authors/{authorId}:
    put:
      tags: 
        - Books
      operationId: addAuthorIntoBoook
      parameters:
       - in: path
         name: bookId
         schema:
          type: string
         required: true
       - in: path
         name: authorId
         schema:
          type: string
         required: true
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /books/authors:
    put:
      tags:
        - Books
      summary: associate multiple books to an author
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/UpdateBookAuthor"  

      responses:
        200:
          description: A book has been associate to an author
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: "#/components/schemas/Book"
  /author:
    get:
      tags:
        - Author
      summary: get all author
      operationId: getAuthor
      parameters:
        - in: query
          name: authorName
          description: filter a author by authorName
          schema: 
            type: string
          required: false
        - $ref: "#/components/parameters/QueryPagination"
      responses:
        200:
         description: the list of author
         content:
           application/json:
            schema: 
              type: array
              items:
                $ref: "#/components/schemas/Author"
    put:
      tags:
        - Author
      summary: create or update author
      operationId: crupdateAuthor
      requestBody:
       content:
         application/json:
          schema: 
            type: array
            items:
              $ref: "#/components/schemas/Author"
      responses:
        200:
          description: the list of craeted or updated author
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
  /authors/{aId}:
    delete:
      tags:
        - Author
      summary: delete an  author
      operationId: deleteAuthor
      parameters:
        - in: path
          name: authorId
          description: author identifier to be deleted
          schema: 
            type: array
          required: true
      responses:
        200:
          description: the author deleted 
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: "#/components/schemas/Author"

components:
  schemas:
    Book:
      type: object
      properties:
        id:
         type: string
        bookname:
         type: string
        author:
         $ref: "#/components/schemas/Author"
        pageNumber:
         type: integer
        topic:
         type: string
         enum:
           - ROMANCE
           - COMEDY
           - OTHER
    Author: 
      type: object
      properties:
        id: 
          type: string
        authorName:
          type: string
        sex:
          $ref: "#/components/schemas/Sex"
    Sex: 
      type: string
      enum:
        - M
        - F 
    CrupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date 
    UpdateBookAuthor:
      type: object
      properties:
        bookId: 
           type: string
        authorId:
           type: string
      required:
        - bookId
        - authorId
  parameters:       
      Page:
         name: page
         description: Page Number for pagination (default 1)
         in: query
         schema:
           type: integer
           default: 1
         required: false
      pageSize:
         name: pageSize
         description: Page size for pagination default 50
         in: query
         schema:
          default: 50
          type: integer
         required: false
      QueryPagination:
        name: page
        description: Page Number for pagination 
        in: query
        schema:
          type: integer
          default: 1
          minimum: 1
        required: false
      PageSize:
        name: pageSize
        description: Page size for pagination default 50
        in: query
        schema:
          type: integer
          default: 50
          minimum: 1
        required: false
  responses:
    BaseResponse : 
      description: response structure 
      content:
        application/json:
          schema:   
            type: object
            properties:
              status:
                type: object
              properties:
              codeOfStatus:
                type: integer
              messages:
                type: string
              body: 
                type: string
    Response200:
      description: code of status 200 response successfully
      content:
        application/json:
          schema: 
            allOf:
              - $ref: '#/components/responses/BaseResponse'
              - type: object
                properties:
                  status: 
                    properties:
                      codeOfStatus:
                        type: integer
                        enum:
                          - 200
                      messages:
                        type: string
                  body:
                    type: object
                    properties:
                      data: 
                        type: array
                        items:
                          $ref: "#/components/schemas/Book" 






   
