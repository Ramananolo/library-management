openapi: 3.0.3
info:
  title: Library API
  version: 1.0.0
  description: STD22001
servers:
  - url: https://library.com
paths:
  /books:
    get:
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        #TODO3: add parameter to filter books by intervals of dates of the releaseDate
        - in: query
          name: releaseDateMin
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: releaseDateMax
          schema:
            type: string
            format: date
          required: false
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /authors/{aId}:
    delete:
      summary: Delete an author
      operationId: deleteAuthor
      parameters:
        - name: aId
          in: path
          description: Author identifie to be deleted 
          schema:
           type: string
          required: true
      responses:
        200:
         description: the author deleted
         content:
           application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
  /authors:
  #TODO2: complete GET (can be filtered by name) - PUT - DELETE
    get:
      summary: get all author
      operationId: getAuthors
      parameters:
        - in: query
          name: AuthorName
          description: Filter returned author by given name 
          schema:
            type: string
          required: false
      responses:
        200:
          description: the list of filtered authors
          content:
            application/json:
             schema:
               type: array
               items:
                 $ref: "#/components/schemas/Author"
    put:
      summary:  update authors
      operationId: crupdateAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: updated authors
          content:
           application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        author:
          #TODO1: set it as a component with properties : id, name, sex (M or F)
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    schema:
    Author:
       type: object
       properties:
        id:
          type: object
        name:
          type: string
        sex:
          $ref: "#/components/schemas/Sex"
       required:
        - id
    Sex:
      type: string
      enum:
        - M
        - F
  